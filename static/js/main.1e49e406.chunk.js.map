{"version":3,"sources":["logo.svg","Table.js","Form.js","App.js","Api.js","List.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TableHead","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHead","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","calue","App","characters","filter","character","i","toConsumableArray","concat","className","src_Table","src_Form","Api","data","_this2","fetch","then","result","json","entry","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","src_Api","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e49e406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nconst TableHead = () => {\n  return <thead></thead>;\n}\nconst TableBody = (props) => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n        <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    )\n  });\n  return <tbody>{rows}</tbody>;\n}\nclass Table extends Component {\n\n    render() {\n        const { characterData, removeCharacter } = this.props;\n        return (\n            <table>\n              <TableHead/>\n              <TableBody characterData={characterData} removeCharacter={removeCharacter}/>\n            </table>\n        );\n    }\n}\nexport default Table;\n","import React, {Component} from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      name: '',\n      job: ''\n    };\n    this.state = this.initialState;\n  }\n  handleChange = event => {\n    const {name, value} = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  }\n  render(){\n    const { name, job } = this.state;\n    return (\n    <form >\n    <label>Name</label>\n    <input type=\"text\" name=\"name\" value={name} onChange={this.handleChange} />\n    <label>Job</label>\n    <input type=\"text\" name=\"job\" calue={job} onChange={this.handleChange} />\n    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n    </form>\n  );\n  }\n}\nexport default Form;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n       characters: [\n         {'name': 'Charlie','job': 'Teacher'},\n         {'name': 'James','job': 'Engineer'},\n         {'name': 'Candice','job': 'Developer'},\n     ]\n   };\n   removeCharacter = index => {\n    const { characters } = this.state;\n\n    this.setState({\n        characters: characters.filter((character, i) => {\n            return i !== index;\n        })\n    });\n  };\n  handleSubmit =  character => {\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n  render() {\n    const {characters} = this.state;\n\n        return (\n            <div className=\"container\">\n                <Table\n                  characterData={characters}\n                  removeCharacter={this.removeCharacter}\n                />\n              <Form handleSubmit={this.handleSubmit}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nclass Api extends Component {\n  // state\n  state = { data: []}\n  componentDidMount(){\n    const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=DFS+computer&format=json&origin=*';\n    fetch(url)\n    .then(result => result.json())\n    .then(result => {\n      this.setState({data: result})\n    });\n  }\n\n  render(){\n    const {data} = this.state;\n    const result = data.map((entry,index) => {\n      return <li key={index}>{entry}</li>;\n    });\n    return <ul>{result}</ul>;\n  }\n}\nexport default Api;\n","import React, {Component} from 'react';\n\nclass List extends Component {\n  render (){\n    return (\n      <div>\n        <ul>\n          <li>Item 1</li>\n          <li>Item 2</li>\n        </ul>\n      </div>\n    )\n  };\n}\nexport default List;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport List from './List';\nimport Api from './Api';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Api/>, document.getElementById('api'));\n//ReactDOM.render(<List/>, document.getElementById('list'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}